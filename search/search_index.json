{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Iascable-and-reuse-existing-resources-boms \u00b6 This project does verify how the usage iascable and reuse of existing environments works with BOMs. 1. Objective \u00b6 The objective is to reuse existing cloud resources in this example we will an OpenShift cluster. 2. How to handle variable input \u00b6 First let us have a look how to handle the input of the variables we need to use when we create new Terraform code with iascable. You can use following blog post to login to you IBM Cloud Red Hat OpenShift cluster using the Red Hat OpenShift CLI . You can get the needed login values pressing the button \"Copy login command\" in the OpenShift UI. 1. Approach to use variable in a BOM \u00b6 Example the terraform-opc-login apiVersion : cloudnativetoolkit.dev/v1alpha1 kind : BillOfMaterial metadata : name : example spec : modules : - name : ocp-login alias : ocp-login version : v1.6.0 variables : - name : server_url value : \"https://YOUR_SERVER_URL\" - name : login_user value : IAM#[YOURID]/[YOUR_SERVER_URL] - name : login_token value : XXX 2. Approach to use variables in a credentials file \u00b6 In that case we have two files the BOM file and the credentials file. Credenticials file credentials.properties export TF_VAR_server_url = https://YOUR_SERVER_URL export TF_VAR_login_user = IAM# [ YOURID ] / [ YOUR_SERVER_URL ] export TF_VAR_login_token = XXX BOM file apiVersion : cloudnativetoolkit.dev/v1alpha1 kind : BillOfMaterial metadata : name : example spec : modules : - name : ocp-login 3 Verify the two options \u00b6 You can follow the blog post to setup the local environment with Multipass 3.1 Option 1 \u00b6 3.1.1 Terminal in the local machine \u00b6 Step 1: Navigate to the example/01 folder \u00b6 cd example/01 Step 2: Edit the BOM and then execute the iascable command \u00b6 BOM nano ./example-variable-bom.yaml Execute iascable iascable build -i example-variable-bom.yaml Step 3: Navigate to the output folder \u00b6 cd output Step 4: Map the current output folder to the running Multipass cli-tools VM \u00b6 Ensure you started the Multipass cli-tools VM before you execute the following command: multipass mount $PWD cli-tools:/automation 3.1.2 Terminal inside the cli-tools VM \u00b6 Now we have mapped the output folder to the cli-tools VM . We can use the installed CLI tools inside the cli-tools VM to apply the Terraform code. All changes we made in with cli-tools VM will be save in the map folder on our local machine. Step 1: Open the interactive shell \u00b6 multipass shell cli-tools Step 2: Navigate to the automation folder \u00b6 cd ../../automation ls Step 3: Now navigate to the example folder \u00b6 cd example/ ls Step 4: Execute apply.sh \u00b6 sh apply.sh Step 5: Enter yes to apply the Terraform code \u00b6 Do you want to perform these actions? Terraform will perform the actions described above. Only 'yes' will be accepted to approve. Enter a value: Step 6: Now you should see the following output \u00b6 Apply complete! Resources: 2 added, 0 changed, 0 destroyed. 3.2 Option 2 \u00b6 3.2.1 Terminal in the local machine \u00b6 Step 1: Navigate to the example/02 folder \u00b6 cd example/02 Step 2: Create a credentials.properties file and edit the file \u00b6 Copy cp ./credentials.properties-template ./credentials.properties Edit nano ./credentials.properties Step 3: Execute the iascable command \u00b6 iascable build -i example-cred-bom.yaml Step 4: Navigate to the output folder \u00b6 cd output Step 5: Copy the credentials.properties into the output folder \u00b6 CURRENT_PATH = $( pwd ) cp $CURRENT_PATH /../credentials.properties $CURRENT_PATH /credentials.properties Step 6: Map the current folder to the Multpass cli-tools VM \u00b6 Ensure you started the Multipass cli-tools VM before you execute the following command: multipass mount $PWD cli-tools:/automation 3.1.2 Terminal inside the cli-tools VM \u00b6 Now we have mapped the output folder to the cli-tools VM . We can use the installed CLI tools inside the cli-tools VM to apply the Terraform code. All changes we made in with cli-tools VM will be saved in the mapped output folder on our local machine. Step 1: Open the interactive shell \u00b6 multipass shell cli-tools Example output: Last login: Mon Sep 12 18 :06:24 2022 from 192 .168.64.1 ubuntu@cli-tools:~$ Step 2: In the virtual machine navigate to the automation folder \u00b6 cd ../../automation ls Step 3: Source the credentials.properties as environment variables and show one variable \u00b6 source credentials.properties echo $TF_VAR_login_user Step 4: Now navigate to the example folder \u00b6 cd example/ ls Step 5: Execute apply.sh \u00b6 sh apply.sh Step 6: Enter yes to apply the Terraform code \u00b6 Do you want to perform these actions? Terraform will perform the actions described above. Only 'yes' will be accepted to approve. Enter a value: Step 7: Now you should see the following output \u00b6 Apply complete! Resources: 2 added, 0 changed, 0 destroyed.","title":"1. Overview"},{"location":"#iascable-and-reuse-existing-resources-boms","text":"This project does verify how the usage iascable and reuse of existing environments works with BOMs.","title":"Iascable-and-reuse-existing-resources-boms"},{"location":"#1-objective","text":"The objective is to reuse existing cloud resources in this example we will an OpenShift cluster.","title":"1. Objective"},{"location":"#2-how-to-handle-variable-input","text":"First let us have a look how to handle the input of the variables we need to use when we create new Terraform code with iascable. You can use following blog post to login to you IBM Cloud Red Hat OpenShift cluster using the Red Hat OpenShift CLI . You can get the needed login values pressing the button \"Copy login command\" in the OpenShift UI.","title":"2. How to handle variable input"},{"location":"#1-approach-to-use-variable-in-a-bom","text":"Example the terraform-opc-login apiVersion : cloudnativetoolkit.dev/v1alpha1 kind : BillOfMaterial metadata : name : example spec : modules : - name : ocp-login alias : ocp-login version : v1.6.0 variables : - name : server_url value : \"https://YOUR_SERVER_URL\" - name : login_user value : IAM#[YOURID]/[YOUR_SERVER_URL] - name : login_token value : XXX","title":"1. Approach to use variable in a BOM"},{"location":"#2-approach-to-use-variables-in-a-credentials-file","text":"In that case we have two files the BOM file and the credentials file. Credenticials file credentials.properties export TF_VAR_server_url = https://YOUR_SERVER_URL export TF_VAR_login_user = IAM# [ YOURID ] / [ YOUR_SERVER_URL ] export TF_VAR_login_token = XXX BOM file apiVersion : cloudnativetoolkit.dev/v1alpha1 kind : BillOfMaterial metadata : name : example spec : modules : - name : ocp-login","title":"2. Approach to use variables in a credentials file"},{"location":"#3-verify-the-two-options","text":"You can follow the blog post to setup the local environment with Multipass","title":"3 Verify the two options"},{"location":"#31-option-1","text":"","title":"3.1 Option 1"},{"location":"#311-terminal-in-the-local-machine","text":"","title":"3.1.1 Terminal in the local machine"},{"location":"#step-1-navigate-to-the-example01-folder","text":"cd example/01","title":"Step 1: Navigate to the example/01 folder"},{"location":"#step-2-edit-the-bom-and-then-execute-the-iascable-command","text":"BOM nano ./example-variable-bom.yaml Execute iascable iascable build -i example-variable-bom.yaml","title":"Step 2: Edit the BOM and then execute the iascable command"},{"location":"#step-3-navigate-to-the-output-folder","text":"cd output","title":"Step 3: Navigate to the output folder"},{"location":"#step-4-map-the-current-output-folder-to-the-running-multipass-cli-tools-vm","text":"Ensure you started the Multipass cli-tools VM before you execute the following command: multipass mount $PWD cli-tools:/automation","title":"Step 4: Map the current output folder to the running Multipass cli-tools VM"},{"location":"#312-terminal-inside-the-cli-tools-vm","text":"Now we have mapped the output folder to the cli-tools VM . We can use the installed CLI tools inside the cli-tools VM to apply the Terraform code. All changes we made in with cli-tools VM will be save in the map folder on our local machine.","title":"3.1.2 Terminal inside the cli-tools VM"},{"location":"#step-1-open-the-interactive-shell","text":"multipass shell cli-tools","title":"Step 1: Open the interactive shell"},{"location":"#step-2-navigate-to-the-automation-folder","text":"cd ../../automation ls","title":"Step 2: Navigate to the automation folder"},{"location":"#step-3-now-navigate-to-the-example-folder","text":"cd example/ ls","title":"Step 3: Now navigate to the example folder"},{"location":"#step-4-execute-applysh","text":"sh apply.sh","title":"Step 4: Execute apply.sh"},{"location":"#step-5-enter-yes-to-apply-the-terraform-code","text":"Do you want to perform these actions? Terraform will perform the actions described above. Only 'yes' will be accepted to approve. Enter a value:","title":"Step 5: Enter yes to apply the Terraform code"},{"location":"#step-6-now-you-should-see-the-following-output","text":"Apply complete! Resources: 2 added, 0 changed, 0 destroyed.","title":"Step 6: Now you should see the following output"},{"location":"#32-option-2","text":"","title":"3.2 Option 2"},{"location":"#321-terminal-in-the-local-machine","text":"","title":"3.2.1 Terminal in the local machine"},{"location":"#step-1-navigate-to-the-example02-folder","text":"cd example/02","title":"Step 1: Navigate to the example/02 folder"},{"location":"#step-2-create-a-credentialsproperties-file-and-edit-the-file","text":"Copy cp ./credentials.properties-template ./credentials.properties Edit nano ./credentials.properties","title":"Step 2: Create a credentials.properties file and edit the file"},{"location":"#step-3-execute-the-iascable-command","text":"iascable build -i example-cred-bom.yaml","title":"Step 3: Execute the iascable command"},{"location":"#step-4-navigate-to-the-output-folder","text":"cd output","title":"Step 4: Navigate to the output folder"},{"location":"#step-5-copy-the-credentialsproperties-into-the-output-folder","text":"CURRENT_PATH = $( pwd ) cp $CURRENT_PATH /../credentials.properties $CURRENT_PATH /credentials.properties","title":"Step 5: Copy the credentials.properties into the output folder"},{"location":"#step-6-map-the-current-folder-to-the-multpass-cli-tools-vm","text":"Ensure you started the Multipass cli-tools VM before you execute the following command: multipass mount $PWD cli-tools:/automation","title":"Step 6: Map the current folder to the Multpass cli-tools VM"},{"location":"#312-terminal-inside-the-cli-tools-vm_1","text":"Now we have mapped the output folder to the cli-tools VM . We can use the installed CLI tools inside the cli-tools VM to apply the Terraform code. All changes we made in with cli-tools VM will be saved in the mapped output folder on our local machine.","title":"3.1.2 Terminal inside the cli-tools VM"},{"location":"#step-1-open-the-interactive-shell_1","text":"multipass shell cli-tools Example output: Last login: Mon Sep 12 18 :06:24 2022 from 192 .168.64.1 ubuntu@cli-tools:~$","title":"Step 1: Open the interactive shell"},{"location":"#step-2-in-the-virtual-machine-navigate-to-the-automation-folder","text":"cd ../../automation ls","title":"Step 2: In the virtual machine navigate to the automation folder"},{"location":"#step-3-source-the-credentialsproperties-as-environment-variables-and-show-one-variable","text":"source credentials.properties echo $TF_VAR_login_user","title":"Step 3: Source the credentials.properties as environment variables and show one variable"},{"location":"#step-4-now-navigate-to-the-example-folder","text":"cd example/ ls","title":"Step 4: Now navigate to the example folder"},{"location":"#step-5-execute-applysh","text":"sh apply.sh","title":"Step 5: Execute apply.sh"},{"location":"#step-6-enter-yes-to-apply-the-terraform-code","text":"Do you want to perform these actions? Terraform will perform the actions described above. Only 'yes' will be accepted to approve. Enter a value:","title":"Step 6: Enter yes to apply the Terraform code"},{"location":"#step-7-now-you-should-see-the-following-output","text":"Apply complete! Resources: 2 added, 0 changed, 0 destroyed.","title":"Step 7: Now you should see the following output"},{"location":"references/","text":"References \u00b6 1. Bill of Materials YAML reference \u00b6 Here's the schema of how a bill of materals bom.yaml should be constructed: apiVersion : cloud.ibm.com/v1alpha1 kind : BillOfMaterial metadata : BOM metadatas metadata.name : Unique BOM identifier, e.g. 110-vpc-openshift metadata.labels : BOM labels metadata.labels.type : BOM type, one of: infrastructure|software metadata.labels.platform : Cloud Platform if BOM is platform specific, one of: ibm|azure|aws metadata.labels.code : BOM 3 digits unique BOM code metadata.annotations : BOM anotations metadata.annotations.displayName : BOM plain text name metadata.annotations.description : BOM description spec : BOM specifications spec.modules : List of modules referenced by this BOM spec.modules.name : Module name spec.modules.alias : Module alias (to be used to reference this module within the BOM) spec.modules.variables : List of module variables to set for this BOM spec.modules.variables.name : Variable name spec.modules.dependencies : List of module dependencies spec.modules.dependencies.name : Module name spec.modules.dependencies.ref : Module reference (alias) if dependent modules appears more than once in the BOM (or generated terraform) 2. Reference for credentials.template \u00b6 The template credentials file needs to be in the output folder after you have applied the iascable command. # Add the values for the Credentials to access the IBM Cloud # Instructions to access this information can be found in the README.MD classic.username = \"\" classic.api.key = \"\" ibmcloud.api.key = \"\" # Authentication to OCP can either be performed with username/password or token # If token is provided it will take precedence login.user = \"\" login.password = \"\" login.token = \"\" server.url = \"\"","title":"2. References"},{"location":"references/#references","text":"","title":"References"},{"location":"references/#1-bill-of-materials-yaml-reference","text":"Here's the schema of how a bill of materals bom.yaml should be constructed: apiVersion : cloud.ibm.com/v1alpha1 kind : BillOfMaterial metadata : BOM metadatas metadata.name : Unique BOM identifier, e.g. 110-vpc-openshift metadata.labels : BOM labels metadata.labels.type : BOM type, one of: infrastructure|software metadata.labels.platform : Cloud Platform if BOM is platform specific, one of: ibm|azure|aws metadata.labels.code : BOM 3 digits unique BOM code metadata.annotations : BOM anotations metadata.annotations.displayName : BOM plain text name metadata.annotations.description : BOM description spec : BOM specifications spec.modules : List of modules referenced by this BOM spec.modules.name : Module name spec.modules.alias : Module alias (to be used to reference this module within the BOM) spec.modules.variables : List of module variables to set for this BOM spec.modules.variables.name : Variable name spec.modules.dependencies : List of module dependencies spec.modules.dependencies.name : Module name spec.modules.dependencies.ref : Module reference (alias) if dependent modules appears more than once in the BOM (or generated terraform)","title":"1. Bill of Materials YAML reference"},{"location":"references/#2-reference-for-credentialstemplate","text":"The template credentials file needs to be in the output folder after you have applied the iascable command. # Add the values for the Credentials to access the IBM Cloud # Instructions to access this information can be found in the README.MD classic.username = \"\" classic.api.key = \"\" ibmcloud.api.key = \"\" # Authentication to OCP can either be performed with username/password or token # If token is provided it will take precedence login.user = \"\" login.password = \"\" login.token = \"\" server.url = \"\"","title":"2. Reference for credentials.template"}]}